name: 🔐 Demonstração de Secrets

on:
  workflow_dispatch:  # Apenas execução manual para este exemplo
    inputs:
      ambiente:
        description: 'Escolha o ambiente'
        required: true
        default: 'desenvolvimento'
        type: choice
        options:
          - desenvolvimento
          - homologacao
          - producao
  push:
    branches: [main]  # Executa em push para a branch main
    paths:
      - .github/workflows/secrets-demo.yml  # Apenas se este arquivo for modificado

jobs:
  demonstrar-secrets:
    name: "🔑 Trabalhando com Secrets"
    runs-on: ubuntu-latest
    
    # Definir variáveis de ambiente baseadas em secrets
    env:
      # Secrets que você vai criar no GitHub
      API_KEY: ${{ secrets.API_KEY }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      # Variáveis públicas (não sensíveis)
      AMBIENTE: ${{ github.event.inputs.ambiente }}
      NODE_ENV: production
    
    steps:
      - name: "📥 Checkout do código"
        uses: actions/checkout@v4
        
      - name: "✅ Verificar se secrets estão configurados"
        run: |
          echo "🔍 Verificando secrets..."
          
          # Verificar se secrets existem (sem mostrar o valor!)
          if [ -z "$API_KEY" ]; then
            echo "Secret API_KEY não está configurado"
          else
            echo "✅ Secret API_KEY está configurado"
            echo "🔹 Tamanho: ${#API_KEY} caracteres"
          fi
          
          if [ -z "$DATABASE_URL" ]; then
            echo "❌ Secret DATABASE_URL não está configurado"
          else
            echo "✅ Secret DATABASE_URL está configurado"
            echo "🔹 Começa com: ${DATABASE_URL:0:10}..."
          fi
          
      - name: "🌍 Mostrar variáveis de ambiente públicas"
        run: |
          echo "📋 Informações do ambiente:"
          echo "🏷️ Ambiente selecionado: $AMBIENTE"
          echo "⚙️ NODE_ENV: $NODE_ENV"
          echo "👤 Executado por: ${{ github.actor }}"
          echo "🌿 Branch: ${{ github.ref_name }}"
          
      - name: "🚫 NUNCA faça isso - Exemplo de erro de segurança"
        run: |
          echo "❌ NUNCA faça echo de secrets diretamente:"
          echo "# echo \"API_KEY: \$API_KEY\"  ← ISSO É PERIGOSO!"
          echo "# echo \"DATABASE_URL: \$DATABASE_URL\"  ← NUNCA FAÇA ISSO!"
          echo ""
          echo "✅ GitHub Actions automaticamente esconde secrets nos logs"
          echo "✅ Mas é melhor nem tentar imprimi-los"
          
      - name: "✅ Forma correta de usar secrets"
        run: |
          echo "💡 Formas corretas de usar secrets:"
          echo ""
          echo "1️⃣ Passar para aplicações:"
          echo "   export API_KEY=\$API_KEY"
          echo "   ./minha-aplicacao  # A aplicação lê a variável"
          echo ""
          echo "2️⃣ Usar em comandos (sem imprimir):"
          echo "   curl -H \"Authorization: Bearer \$API_KEY\" https://api.exemplo.com"
          echo ""
          echo "3️⃣ Criar arquivos de configuração:"
          echo "   echo \"api_key=\$API_KEY\" > config.env"
          
      - name: "🔧 Simulação de uso prático"
        run: |
          echo "🚀 Simulando deploy com secrets..."
          
          # Simular criação de arquivo de configuração
          cat > app.config << EOF
          [database]
          url=${DATABASE_URL:-postgresql://localhost:5432/app}
          
          [api]
          key=${API_KEY:-demo-key}
          environment=${AMBIENTE}
          EOF
          
          echo "✅ Arquivo de configuração criado!"
          echo "📄 Conteúdo (com valores mascarados):"
          sed 's/key=.*/key=***HIDDEN***/' app.config
          
      - name: "🎯 Diferentes tipos de secrets"
        env:
          # Usando diferentes secrets para diferentes propósitos
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Token padrão do GitHub
          CUSTOM_TOKEN: ${{ secrets.CUSTOM_TOKEN }}   # Seu token personalizado
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }} # Webhook do Slack
        run: |
          echo "📚 Tipos de secrets comuns:"
          echo ""
          echo "🔹 GITHUB_TOKEN: Sempre disponível automaticamente"
          if [ -n "$GITHUB_TOKEN" ]; then
            echo "  ✅ Configurado (${#GITHUB_TOKEN} chars)"
          fi
          
          echo "🔹 CUSTOM_TOKEN: Token personalizado para APIs"
          if [ -n "$CUSTOM_TOKEN" ]; then
            echo "  ✅ Configurado"
          else
            echo "  ❌ Não configurado (opcional)"
          fi
          
          echo "🔹 SLACK_WEBHOOK: Para notificações"
          if [ -n "$SLACK_WEBHOOK" ]; then
            echo "  ✅ Configurado"
          else
            echo "  ❌ Não configurado (opcional)"
          fi
          
  demonstrar-condicoes:
    name: "🎛️ Secrets e Condições"
    runs-on: ubuntu-latest
    # Este job só executa se estivermos em produção
    if: github.event.inputs.ambiente == 'producao'
    
    steps:
      - name: "⚠️ Ambiente de produção detectado"
        run: |
          echo "🚨 ATENÇÃO: Executando em ambiente de PRODUÇÃO!"
          echo "🔒 Verificações de segurança extras ativadas"
          echo "📧 Notificações serão enviadas para administradores"
          
      - name: "🛡️ Verificações de segurança"
        env:
          PROD_API_KEY: ${{ secrets.PROD_API_KEY }}
        run: |
          echo "🔍 Executando verificações de produção..."
          
          if [ -z "$PROD_API_KEY" ]; then
            echo "❌ ERRO: PROD_API_KEY não configurado!"
            echo "🚫 Deploy em produção cancelado por segurança"
            exit 1
          else
            echo "✅ Chave de produção verificada"
            echo "🎯 Pronto para deploy em produção"
          fi